name: Documentation

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'docs/**'
      - 'xpcs_toolkit/**'
      - 'pyproject.toml'
      - '.github/workflows/docs.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'docs/**'
      - 'xpcs_toolkit/**'
      - 'pyproject.toml'
      - '.github/workflows/docs.yml'
  workflow_dispatch:

jobs:
  debug-info:
    runs-on: ubuntu-latest
    steps:
    - name: Debug workflow trigger
      run: |
        echo "Event name: ${{ github.event_name }}"
        echo "Branch: ${{ github.ref }}"
        echo "Repository: ${{ github.repository }}"
        echo "Commit message: ${{ github.event.head_commit.message }}"

  docs-build-test:
    runs-on: ubuntu-latest
    needs: debug-info
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.12
      uses: actions/setup-python@v4
      with:
        python-version: "3.12"
    
    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/pip
          docs/_build
        key: ${{ runner.os }}-docs-${{ hashFiles('**/requirements*.txt', '**/pyproject.toml') }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[docs]"
        pip install -r docs/requirements.txt
    
    - name: Install system dependencies for HDF5
      run: |
        sudo apt-get update
        sudo apt-get install -y libhdf5-dev pkg-config
    
    - name: Lint documentation
      run: |
        echo "::group::Documentation Linting"
        
        # Check RST syntax
        python -m docutils --halt=warning docs/index.rst /dev/null
        
        # Check for common issues
        find docs -name "*.rst" -exec python -c "
        import sys
        with open(sys.argv[1]) as f:
            content = f.read()
            if 'TODO' in content or 'FIXME' in content:
                print(f'Found TODO/FIXME in {sys.argv[1]}')
                sys.exit(1)
        " {} \;
        
        echo "::endgroup::"
    
    - name: Build documentation
      run: |
        echo "::group::Sphinx Documentation Build"
        cd docs
        make clean
        sphinx-build -b html -W --keep-going . _build/html
        echo "::endgroup::"
    
    - name: Test documentation links
      run: |
        echo "::group::Link Check"
        cd docs
        sphinx-build -b linkcheck . _build/linkcheck
        echo "::endgroup::"
    
    - name: Test code examples
      run: |
        echo "::group::Doctest"
        cd docs
        sphinx-build -b doctest . _build/doctest || true  # Allow failures for now
        echo "::endgroup::"
    
    - name: Check documentation coverage
      run: |
        echo "::group::Documentation Coverage"
        cd docs
        sphinx-build -b coverage . _build/coverage
        if [ -f _build/coverage/python.txt ]; then
          echo "Documentation coverage report:"
          cat _build/coverage/python.txt
        fi
        echo "::endgroup::"
    
    - name: Upload documentation artifact
      uses: actions/upload-artifact@v3
      with:
        name: documentation-html
        path: docs/_build/html/
        retention-days: 30
    
    - name: Deploy to GitHub Pages (main branch only)
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: docs/_build/html
        force_orphan: true
        user_name: 'github-actions[bot]'
        user_email: 'github-actions[bot]@users.noreply.github.com'
        commit_message: 'Deploy documentation for ${{ github.sha }}'

  docs-accessibility:
    runs-on: ubuntu-latest
    needs: [debug-info, docs-build-test]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.12
      uses: actions/setup-python@v4
      with:
        python-version: "3.12"
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[docs]"
        pip install -r docs/requirements.txt
        sudo apt-get update
        sudo apt-get install -y libhdf5-dev pkg-config
    
    - name: Build documentation
      run: |
        cd docs
        sphinx-build -b html . _build/html
    
    - name: Check accessibility
      uses: a11ywatch/github-action@v2.1.5
      with:
        website: docs/_build/html/index.html
        fail-on-error: false
        verbose: true

  docs-quality:
    runs-on: ubuntu-latest
    needs: debug-info
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.12
      uses: actions/setup-python@v4
      with:
        python-version: "3.12"
    
    - name: Install documentation quality tools
      run: |
        python -m pip install --upgrade pip
        pip install interrogate doc8 rstcheck
    
    - name: Check docstring coverage
      run: |
        echo "::group::Docstring Coverage"
        interrogate xpcs_toolkit --verbose --fail-under=70 \
          --exclude xpcs_toolkit/tests \
          --exclude xpcs_toolkit/module \
          --exclude xpcs_toolkit/fileIO \
          --exclude xpcs_toolkit/helper \
          --exclude xpcs_toolkit/configure
        echo "::endgroup::"
    
    - name: Lint RST files
      run: |
        echo "::group::RST Linting"
        find docs -name "*.rst" | head -20 | xargs rstcheck --report-level warning
        echo "::endgroup::"
    
    - name: Check documentation style
      run: |
        echo "::group::Documentation Style"
        doc8 docs/ --max-line-length=88 --allow-long-titles || true
        echo "::endgroup::"

  spell-check:
    runs-on: ubuntu-latest
    needs: debug-info
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install aspell
      run: |
        sudo apt-get update
        sudo apt-get install -y aspell aspell-en
    
    - name: Spell check documentation
      run: |
        echo "::group::Spell Check"
        
        # Create custom dictionary for scientific terms
        cat > .aspell.en.pws << EOF
personal_ws-1.1 en 50
XPCS
SAXS
HDF5
NeXus
Angstrom
synchrotron
beamline
autocorrelation
multitau
PyPI
ReadTheDocs
Numba
Cython
NumPy
SciPy
matplotlib
pytest
ruff
mypy
conda
pip
API
CLI
GUI
JSON
CSV
PNG
PDF
SVG
EOF
        
        # Check markdown and rst files
        find docs -name "*.rst" -exec aspell --mode=tex --personal=.aspell.en.pws --lang=en check {} \;
        find . -name "README.md" -exec aspell --mode=tex --personal=.aspell.en.pws --lang=en check {} \;
        
        echo "::endgroup::"

  docs-performance:
    runs-on: ubuntu-latest
    needs: debug-info
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.12
      uses: actions/setup-python@v4
      with:
        python-version: "3.12"
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[docs]"
        pip install -r docs/requirements.txt
        sudo apt-get update
        sudo apt-get install -y libhdf5-dev pkg-config
    
    - name: Measure documentation build time
      run: |
        echo "::group::Build Performance"
        
        cd docs
        
        # Clean build
        echo "Clean build:"
        time sphinx-build -b html . _build/html-clean
        
        # Incremental build  
        echo "Incremental build:"
        time sphinx-build -b html . _build/html-incremental
        
        # Check build size
        echo "Documentation size:"
        du -sh _build/html-clean
        
        # Count files
        echo "Number of HTML files:"
        find _build/html-clean -name "*.html" | wc -l
        
        echo "::endgroup::"

  notebook-docs:
    runs-on: ubuntu-latest
    needs: debug-info
    if: contains(github.event.head_commit.message, '[notebooks]') || github.event_name == 'schedule' || github.event_name == 'workflow_dispatch'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.12
      uses: actions/setup-python@v4
      with:
        python-version: "3.12"
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[docs]"
        pip install -r docs/requirements.txt
        pip install jupyter nbconvert
        sudo apt-get update
        sudo apt-get install -y libhdf5-dev pkg-config
    
    - name: Execute notebooks
      run: |
        echo "::group::Notebook Execution"
        
        if [ -d "docs/notebooks" ]; then
          find docs/notebooks -name "*.ipynb" -exec \
            jupyter nbconvert --to notebook --execute --inplace {} \;
        fi
        
        if [ -d "tutorials" ]; then
          find tutorials -name "*.ipynb" -exec \
            jupyter nbconvert --to notebook --execute --inplace {} \;
        fi
        
        echo "::endgroup::"
    
    - name: Build documentation with notebooks
      run: |
        cd docs
        sphinx-build -b html . _build/html-with-notebooks
    
    - name: Upload notebook documentation
      uses: actions/upload-artifact@v3
      with:
        name: documentation-with-notebooks
        path: docs/_build/html-with-notebooks/