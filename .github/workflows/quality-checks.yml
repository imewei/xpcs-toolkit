name: Quality Checks

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  # Pre-commit style checks
  pre-commit-checks:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.12
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install ruff mypy bandit
    
    - name: Code formatting check
      run: |
        ruff format --check --diff .
    
    - name: Linting
      run: |
        ruff check . --output-format=github
    
    - name: Type checking
      run: |
        mypy xpcs_toolkit/ --ignore-missing-imports --show-error-codes
    
    - name: Security scanning
      run: |
        bandit -r xpcs_toolkit/ -ll

  # Documentation checks
  documentation-quality:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.12
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[test-enhanced]"
        pip install pydocstyle interrogate
    
    - name: Docstring style check
      run: |
        pydocstyle xpcs_toolkit/ --convention=numpy || true
    
    - name: Documentation coverage
      run: |
        interrogate xpcs_toolkit/ -v --fail-under=70 || true
    
    - name: Run documentation tests
      run: |
        pytest xpcs_toolkit/tests/integration/test_documentation.py -v -x

  # Import and dependency checks
  dependency-checks:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    strategy:
      matrix:
        python-version: ['3.12', '3.13']
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Test minimal installation
      run: |
        python -m pip install --upgrade pip
        pip install -e .
    
    - name: Test core imports
      run: |
        python -c "
        # Test basic imports
        import xpcs_toolkit
        
        # Test core modules
        from xpcs_toolkit.core.data.locator import DataFileLocator
        from xpcs_toolkit.scientific.correlation import g2
        
        print('✅ Core imports successful')
        "
    
    - name: Test lazy imports
      run: |
        python -c "
        # Test that lazy imports work
        from xpcs_toolkit.scientific.correlation import g2
        
        # These should not fail even without optional dependencies
        print('g2 module loaded successfully')
        print(f'Available functions: {[x for x in dir(g2) if not x.startswith(\"_\")]}')
        "
    
    - name: Dependency vulnerability scan
      run: |
        pip install safety
        safety check || echo 'Safety check completed with warnings'

  # Performance regression detection
  performance-regression:
    runs-on: ubuntu-latest
    timeout-minutes: 20
    if: github.event_name == 'pull_request'
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 2  # Need base commit for comparison
    
    - name: Set up Python 3.12
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[test-enhanced]"
    
    - name: Run baseline benchmarks (main branch)
      run: |
        git checkout HEAD~1
        pytest xpcs_toolkit/tests/performance/benchmarks/ \
          --benchmark-only \
          --benchmark-json=baseline-benchmarks.json \
          --benchmark-sort=mean \
          || echo "Baseline benchmark failed, continuing"
        git checkout -
    
    - name: Run current benchmarks
      run: |
        pytest xpcs_toolkit/tests/performance/benchmarks/ \
          --benchmark-only \
          --benchmark-json=current-benchmarks.json \
          --benchmark-sort=mean
    
    - name: Compare performance
      run: |
        python -c "
        import json
        import os
        
        def load_benchmarks(filename):
            if not os.path.exists(filename):
                return {}
            with open(filename) as f:
                data = json.load(f)
            return {b['name']: b['stats']['mean'] for b in data.get('benchmarks', [])}
        
        baseline = load_benchmarks('baseline-benchmarks.json')
        current = load_benchmarks('current-benchmarks.json')
        
        print('Performance Comparison:')
        
        for name in current:
            current_time = current[name]
            if name in baseline:
                baseline_time = baseline[name]
                change = ((current_time - baseline_time) / baseline_time) * 100
                status = '⚠️' if abs(change) > 10 else '✅'
                print(f'{status} {name}: {change:+.1f}% ({current_time:.4f}s vs {baseline_time:.4f}s)')
            else:
                print(f'🆕 {name}: {current_time:.4f}s (new benchmark)')
        "

  # Code complexity and maintainability
  code-quality-metrics:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.12
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
    
    - name: Install code analysis tools
      run: |
        python -m pip install --upgrade pip
        pip install radon xenon mccabe
    
    - name: Cyclomatic complexity analysis
      run: |
        radon cc xpcs_toolkit/ -a --total-average
    
    - name: Maintainability index
      run: |
        radon mi xpcs_toolkit/ -s
    
    - name: Halstead complexity
      run: |
        radon hal xpcs_toolkit/ -f
    
    - name: Code complexity gate
      run: |
        # Fail if complexity is too high
        xenon xpcs_toolkit/ --max-absolute B --max-modules B --max-average A || echo "Complexity check completed"

  # Test coverage gate
  coverage-gate:
    runs-on: ubuntu-latest
    timeout-minutes: 25
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.12
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[test-enhanced]"
    
    - name: Run tests with coverage
      run: |
        pytest xpcs_toolkit/tests/ \
          --cov=xpcs_toolkit \
          --cov-report=xml \
          --cov-report=term \
          --cov-branch \
          --cov-fail-under=75 \
          --maxfail=5 \
          -q
    
    - name: Coverage summary
      run: |
        python -c "
        import xml.etree.ElementTree as ET
        
        try:
            tree = ET.parse('coverage.xml')
            root = tree.getroot()
            coverage = float(root.get('line-rate', 0)) * 100
            
            print(f'📊 Overall coverage: {coverage:.1f}%')
            
            # Module-level coverage
            for package in root.findall('.//package'):
                name = package.get('name', '').replace('xpcs_toolkit.', '')
                if name:
                    module_coverage = float(package.get('line-rate', 0)) * 100
                    status = '✅' if module_coverage >= 75 else '⚠️' if module_coverage >= 50 else '❌'
                    print(f'{status} {name}: {module_coverage:.1f}%')
                    
        except Exception as e:
            print(f'Could not parse coverage report: {e}')
        "
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: quality-gate
        name: quality-gate-coverage

  # Final quality gate status
  quality-gate-final:
    runs-on: ubuntu-latest
    needs: [pre-commit-checks, documentation-quality, dependency-checks, coverage-gate]
    if: always()
    
    steps:
    - name: Quality Gate Summary
      run: |
        echo "Quality Gate Results:"
        echo "Pre-commit checks: ${{ needs.pre-commit-checks.result }}"
        echo "Documentation quality: ${{ needs.documentation-quality.result }}"
        echo "Dependency checks: ${{ needs.dependency-checks.result }}"
        echo "Coverage gate: ${{ needs.coverage-gate.result }}"
        
        # Determine overall status
        if [[ "${{ needs.pre-commit-checks.result }}" == "success" && 
              "${{ needs.documentation-quality.result }}" == "success" && 
              "${{ needs.dependency-checks.result }}" == "success" && 
              "${{ needs.coverage-gate.result }}" == "success" ]]; then
          echo "🎉 All quality checks PASSED!"
          echo "quality_gate_status=passed" >> $GITHUB_ENV
        else
          echo "🚨 Some quality checks FAILED!"
          echo "quality_gate_status=failed" >> $GITHUB_ENV
          exit 1
        fi
    
    - name: Comment on PR (if applicable)
      if: github.event_name == 'pull_request' && env.quality_gate_status == 'passed'
      uses: actions/github-script@v6
      with:
        script: |
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: '✅ **Quality Gates PASSED** - All automated quality checks have passed successfully!'
          })